<?xml version="1.0"?>
<doc>
<assembly>
<name>
SharedVBNetRoutines
</name>
</assembly>
<members>
<member name="F:SharedVBNetRoutines.clsParseCommandLine.DEFAULT_SWITCH_CHAR">
 <summary>
 Default switch char
 </summary>
</member>
<member name="F:SharedVBNetRoutines.clsParseCommandLine.ALTERNATE_SWITCH_CHAR">
 <summary>
 Alternate switch char
 </summary>
</member>
<member name="F:SharedVBNetRoutines.clsParseCommandLine.DEFAULT_SWITCH_PARAM_CHAR">
 <summary>
 Default character between the switch name and a value to associate with the parameter
 </summary>
</member>
<member name="P:SharedVBNetRoutines.clsParseCommandLine.NeedToShowHelp">
 <summary>
 If true, we need to show the syntax to the user due to a switch error, invalid switch, or the presence of /? or /help
 </summary>
</member>
<member name="P:SharedVBNetRoutines.clsParseCommandLine.ParameterCount">
 <summary>
 Number of switches
 </summary>
</member>
<member name="P:SharedVBNetRoutines.clsParseCommandLine.NonSwitchParameterCount">
 <summary>
 Number of parameters that are not preceded by a switch
 </summary>
</member>
<member name="P:SharedVBNetRoutines.clsParseCommandLine.DebugMode">
 <summary>
 Set to true to see extra debug information
 </summary>
</member>
<member name="M:SharedVBNetRoutines.clsParseCommandLine.InvalidParametersPresent(System.Collections.Generic.List{System.String})">
 <summary>
 Compares the parameter names in objParameterList with the parameters at the command line
 </summary>
 <param name="parameterList">Parameter list</param>
 <returns>True if any of the parameters are not present in parameterList()</returns>
</member>
<member name="M:SharedVBNetRoutines.clsParseCommandLine.InvalidParametersPresent(System.String[])">
 <summary>
 Compares the parameter names in parameterList with the parameters at the command line
 </summary>
 <param name="parameterList">Parameter list</param>
 <returns>True if any of the parameters are not present in parameterList()</returns>
</member>
<member name="M:SharedVBNetRoutines.clsParseCommandLine.InvalidParametersPresent(System.String[],System.Boolean)">
 <summary>
 Compares the parameter names in parameterList with the parameters at the command line
 </summary>
 <param name="parameterList">Parameter list</param>
 <param name="caseSensitive">True to perform case-sensitive matching of the parameter name</param>
 <returns>True if any of the parameters are not present in parameterList()</returns>
</member>
<member name="M:SharedVBNetRoutines.clsParseCommandLine.InvalidParametersPresent(System.Collections.Generic.List{System.String},System.Boolean)">
 <summary>
 Validate that the user-provided parameters are in the validParameters list
 </summary>
 <param name="validParameters"></param>
 <param name="caseSensitive"></param>
 <returns></returns>
</member>
<member name="M:SharedVBNetRoutines.clsParseCommandLine.InvalidParameters(System.Collections.Generic.List{System.String})">
 <summary>
 Retrieve a list of the user-provided parameters that are not in validParameters
 </summary>
 <param name="validParameters"></param>
 <returns></returns>
</member>
<member name="M:SharedVBNetRoutines.clsParseCommandLine.InvalidParameters(System.Collections.Generic.List{System.String},System.Boolean)">
 <summary>
 Retrieve a list of the user-provided parameters that are not in validParameters
 </summary>
 <param name="validParameters"></param>
 <param name="caseSensitive"></param>
 <returns></returns>
</member>
<member name="M:SharedVBNetRoutines.clsParseCommandLine.IsParameterPresent(System.String)">
 <summary>
 Look for parameter on the command line
 </summary>
 <param name="paramName">Parameter name</param>
 <returns>True if present, otherwise false</returns>
 <remarks>Does not work for /? or /help -- for those, use .NeedToShowHelp</remarks>
</member>
<member name="M:SharedVBNetRoutines.clsParseCommandLine.ParseCommandLine">
 <summary>
 Parse the parameters and switches at the command line; uses / for the switch character and : for the switch parameter character
 </summary>
 <returns>Returns True if any command line parameters were found; otherwise false</returns>
 <remarks>If /? or /help is found, then returns False and sets mShowHelp to True</remarks>
</member>
<member name="M:SharedVBNetRoutines.clsParseCommandLine.ParseCommandLine(System.Char)">
 <summary>
 Parse the parameters and switches at the command line; uses : for the switch parameter character
 </summary>
 <returns>Returns True if any command line parameters were found; otherwise false</returns>
 <remarks>If /? or /help is found, then returns False and sets mShowHelp to True</remarks>
</member>
<member name="M:SharedVBNetRoutines.clsParseCommandLine.ParseCommandLine(System.Char,System.Char)">
 <summary>
 Parse the parameters and switches at the command line
 </summary>
 <param name="switchStartChar"></param>
 <param name="switchParameterChar"></param>
 <returns>Returns True if any command line parameters were found; otherwise false</returns>
 <remarks>If /? or /help is found, then returns False and sets mShowHelp to True</remarks>
</member>
<member name="M:SharedVBNetRoutines.clsParseCommandLine.PauseAtConsole(System.Int32,System.Int32)">
 <summary>
 Pause the program for the specified number of milliseconds, displaying a period at a set interval while paused
 </summary>
 <param name="millisecondsToPause">Milliseconds to pause; default 5 seconds</param>
 <param name="millisecondsBetweenDots">Seconds between each period; default 1 second</param>
</member>
<member name="M:SharedVBNetRoutines.clsParseCommandLine.RetrieveNonSwitchParameter(System.Int32)">
 <summary>
 Returns the value of the non-switch parameter at the given index
 </summary>
 <param name="parameterIndex">Parameter index</param>
 <returns>The value of the parameter at the given index; empty string if no value or invalid index</returns>
</member>
<member name="M:SharedVBNetRoutines.clsParseCommandLine.RetrieveParameter(System.Int32,System.String@,System.String@)">
 <summary>
 Returns the parameter at the given index
 </summary>
 <param name="parameterIndex">Parameter index</param>
 <param name="paramName">Parameter name (output)</param>
 <param name="paramValue">Value associated with the parameter; empty string if no value (output)</param>
 <returns></returns>
</member>
<member name="M:SharedVBNetRoutines.clsParseCommandLine.RetrieveValueForParameter(System.String,System.String@)">
 <summary>
 Look for parameter on the command line and returns its value in paramValue
 </summary>
 <param name="paramName">Parameter name</param>
 <param name="paramValue">Value associated with the parameter; empty string if no value (output)</param>
 <returns>True if present, otherwise false</returns>
</member>
<member name="M:SharedVBNetRoutines.clsParseCommandLine.RetrieveValueForParameter(System.String,System.String@,System.Boolean)">
 <summary>
 Look for parameter on the command line and returns its value in paramValue
 </summary>
 <param name="paramName">Parameter name</param>
 <param name="paramValue">Value associated with the parameter; empty string if no value (output)</param>
 <param name="caseSensitive">True to perform case-sensitive matching of the parameter name</param>
 <returns>True if present, otherwise false</returns>
</member>
</members>
</doc>
